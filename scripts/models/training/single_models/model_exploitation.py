import argparse
import os
import random

from eegDlUncertainty.experiments.SingleModelExperiment import SingleModelExperiment
from eegDlUncertainty.experiments.utils_exp import get_baseparameters_from_config


def generate_random_hyperparameters(model_name):
    if model_name == "InceptionNetwork":
        # Package the parameters into a dictionary
        params = {
            'cnn_units': random.choice(range(8, 64, 2)),
            'depth': random.choice(range(3, 8)),
            'max_kernel_size': random.choice(range(4, 60, 2)),
            'use_bottleneck': random.choice([True, False]),
            'use_residual': random.choice([True, False]),
        }
    elif model_name == "EEGNetv4MTSC":
        params = {
            "dropout_rate": random.uniform(0.1, 0.5),  # Randomly choose a value between 0.1 and 0.5
            "pool_mode": random.choice(["mean", "max"]),  # Randomly choose between 'mean' and 'max'
            "f1": random.choice([8, 16, 32]),  # Randomly choose between these values
            "d": random.choice([1, 2, 4]),  # Randomly choose between these values
            "kernel_length": random.choice([32, 64, 128]),  # Randomly choose between these values
            "third_kernel_size": random.choice([(8, 4), (10, 5), (6, 3)])  # Randomly choose a tuple
        }

        # Decide randomly whether to use d*f1 for f2 or select from a predefined set
        if random.choice([True, False]):
            params["f2"] = params["d"] * params["f1"]
        else:
            params["f2"] = random.choice([16, 32, 64])
    elif model_name == "EEGNetv1MTSC":
        params = {
            "dropout_rate": random.uniform(0.1, 0.5),  # Randomly choose a value between 0.1 and 0.5
            "pool_mode": random.choice(["mean", "max"]),  # Randomly choose between 'mean' and 'max'
            "second_kernel_size": random.choice([(2, 64), (2, 32), (2, 16), (2, 8)]),
            "third_kernel_size": random.choice([(8, 4), (4, 2), (16, 4), (32, 2)])
        }
    else:
        raise KeyError(f"Unrecognized model name : {model_name}")
    return params


def main():
    num_random_search_iterations = 30

    # Argumentparser
    arg_parser = argparse.ArgumentParser(description="Run script for training a model")
    arg_parser.add_argument("-c", "--config_path", type=str, help="Path to config (.json) file",
                            required=False, default=None)
    arg_parser.add_argument("--run_name", type=str, help="Run name for MLFlow", default=None)
    args = arg_parser.parse_args()
    if args.config_path is None:
        args.config_path = "test_conf.json"
        print("WARNING!!!! No config argument added, using the first conf.json file, mostly used for pycharm!")

    config_path = os.path.join(os.path.dirname(__file__), "config_files", args.config_path)

    for i in range(num_random_search_iterations):
        parameters = {}
        if args.run_name is None:
            run_name = f"random_search_model{i}"
        else:
            run_name = f"{args.run_name}_{i}"

        parameters = get_baseparameters_from_config(config_path=config_path)
        parameters['config_path'] = config_path
        parameters['run_name'] = run_name

        parameters['experiment_name'] = f"ModelExploitation_{parameters['classifier_name']}"

        model_param = generate_random_hyperparameters(model_name=parameters['classifier_name'])
        parameters.update(model_param)

        exp = SingleModelExperiment(**parameters)
        exp.run()


if __name__ == "__main__":
    main()
